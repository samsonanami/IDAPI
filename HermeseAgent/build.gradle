project.version.with {
    snapshotSuffix  = "-"
    preRelease {
        startingVersion = "0.0.0"
        bump { String version ->
            int firstNum = Integer.parseInt(version.split(/\./)[0])
            int secondNum = Integer.parseInt(version.split(/\./)[1])
            int thirdNum = Integer.parseInt(version.split(/\./)[2])
            if(thirdNum > 9){
                thirdNum = 0
                secondNum = secondNum + 1
            }else{
                thirdNum = thirdNum + 1
            }
            return "${firstNum}.${secondNum}.${thirdNum}"
        }
    }

}

dependencies {
    compile group: 'commons-daemon', name: 'commons-daemon', version: '1.0.15'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

    compile group: 'org.springframework', name: 'spring-core', version: '4.3.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '4.3.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-orm', version: '4.3.2.RELEASE'

    compile group: 'org.apache.activemq', name: 'activemq-client', version: '5.14.1'

    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.4'

    // https://mvnrepository.com/artifact/com.mchange/c3p0
    compile group: 'com.mchange', name: 'c3p0', version: '0.9.5.2'


    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'

    compile project(':JobMessagingChannelHandler')
    compile project (':Services:HermesAgentServices')
    compile project(':DataTransferObjects')
}

jar {
    manifest {
        attributes(
                "Class-Path": "./"
        )
    }
}

sourceSets {
    main {
        resources {
            exclude '*.properties'
            exclude '*.xml'
        }
    }
}
task copyLibs(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}

task copyConfigs(type: Copy){
    into "$buildDir/output/config"
    from "src/main/resources"
}

task bsxBuilder(type: Exec){

    workingDir '../Deployment/executer'
    commandLine './executer.sh'
}


task bsx(dependsOn :['copyLibs', 'copyConfigs', 'bsxBuilder'])
copyLibs.mustRunAfter build
copyConfigs.mustRunAfter copyLibs
bsxBuilder.mustRunAfter copyConfigs
