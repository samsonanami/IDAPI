package com.fintech.orion.dataabstraction.entities.orion;
// Generated Dec 25, 2016 10:54:56 AM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Client generated by hbm2java
 */
@Entity
@Table(name="client"
    , uniqueConstraints = {@UniqueConstraint(columnNames="EMAIL"), @UniqueConstraint(columnNames="USER_NAME")} 
)
public class Client  implements java.io.Serializable {

    private Integer id;
    private UserType userType;
    private String email;
    private Date registeredOn;
    private String userName;
    private String password;
    private boolean enabled;
    private Set<Resource> resources = new HashSet<Resource>(0);
    private Set<License> licenses = new HashSet<License>(0);
    private Set<AccountMapping> accountMappingsForParent = new HashSet<AccountMapping>(0);
    private Set<License> licenses_1 = new HashSet<License>(0);
    private Set<ProcessingRequest> processingRequests = new HashSet<ProcessingRequest>(0);
    private Set<ProcessingRequest> processingRequests_1 = new HashSet<ProcessingRequest>(0);
    private Set<Resource> resources_1 = new HashSet<Resource>(0);
    private Set<ProcessConfig> processConfigs = new HashSet<ProcessConfig>(0);
    private Set<AccountMapping> accountMappingsForChild = new HashSet<AccountMapping>(0);

    public Client() {
    }

    public Client(UserType userType, String email, Date registeredOn, String userName, String password,
            boolean enabled) {
        this.userType = userType;
        this.email = email;
        this.registeredOn = registeredOn;
        this.userName = userName;
        this.password = password;
        this.enabled = enabled;
    }

    public Client(UserType userType, String email, Date registeredOn, String userName, String password, boolean enabled,
            Set<Resource> resources, Set<License> licenses, Set<AccountMapping> accountMappingsForParent,
            Set<License> licenses_1, Set<ProcessingRequest> processingRequests,
            Set<ProcessingRequest> processingRequests_1, Set<Resource> resources_1, Set<ProcessConfig> processConfigs,
            Set<AccountMapping> accountMappingsForChild) {
        this.userType = userType;
        this.email = email;
        this.registeredOn = registeredOn;
        this.userName = userName;
        this.password = password;
        this.enabled = enabled;
        this.resources = resources;
        this.licenses = licenses;
        this.accountMappingsForParent = accountMappingsForParent;
        this.licenses_1 = licenses_1;
        this.processingRequests = processingRequests;
        this.processingRequests_1 = processingRequests_1;
        this.resources_1 = resources_1;
        this.processConfigs = processConfigs;
        this.accountMappingsForChild = accountMappingsForChild;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "USER_TYPE_ID", nullable = false)
    public UserType getUserType() {
        return this.userType;
    }

    public void setUserType(UserType userType) {
        this.userType = userType;
    }

    @Column(name = "EMAIL", unique = true, nullable = false, length = 256)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="REGISTERED_ON", nullable=false, length=10)
    public Date getRegisteredOn() {
        return this.registeredOn;
    }
    
    public void setRegisteredOn(Date registeredOn) {
        this.registeredOn = registeredOn;
    }

    
    @Column(name="USER_NAME", unique=true, nullable=false, length=45)
    public String getUserName() {
        return this.userName;
    }
    
    public void setUserName(String userName) {
        this.userName = userName;
    }

    
    @Column(name="PASSWORD", nullable=false, length=512)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="ENABLED", nullable=false)
    public boolean isEnabled() {
        return this.enabled;
    }
    
    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "client")
    public Set<Resource> getResources() {
        return this.resources;
    }

    public void setResources(Set<Resource> resources) {
        this.resources = resources;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "client")
    public Set<License> getLicenses() {
        return this.licenses;
    }
    
    public void setLicenses(Set<License> licenses) {
        this.licenses = licenses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "clientByParent")
    public Set<AccountMapping> getAccountMappingsForParent() {
        return this.accountMappingsForParent;
    }

    public void setAccountMappingsForParent(Set<AccountMapping> accountMappingsForParent) {
        this.accountMappingsForParent = accountMappingsForParent;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "client")
    public Set<License> getLicenses_1() {
        return this.licenses_1;
    }

    public void setLicenses_1(Set<License> licenses_1) {
        this.licenses_1 = licenses_1;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "client")
    public Set<ProcessingRequest> getProcessingRequests() {
        return this.processingRequests;
    }
    
    public void setProcessingRequests(Set<ProcessingRequest> processingRequests) {
        this.processingRequests = processingRequests;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "client")
    public Set<ProcessingRequest> getProcessingRequests_1() {
        return this.processingRequests_1;
    }

    public void setProcessingRequests_1(Set<ProcessingRequest> processingRequests_1) {
        this.processingRequests_1 = processingRequests_1;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "client")
    public Set<Resource> getResources_1() {
        return this.resources_1;
    }

    public void setResources_1(Set<Resource> resources_1) {
        this.resources_1 = resources_1;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="client")
    public Set<ProcessConfig> getProcessConfigs() {
        return this.processConfigs;
    }
    
    public void setProcessConfigs(Set<ProcessConfig> processConfigs) {
        this.processConfigs = processConfigs;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "clientByChild")
    public Set<AccountMapping> getAccountMappingsForChild() {
        return this.accountMappingsForChild;
    }

    public void setAccountMappingsForChild(Set<AccountMapping> accountMappingsForChild) {
        this.accountMappingsForChild = accountMappingsForChild;
    }

}
