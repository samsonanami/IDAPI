package com.fintech.orion.dataabstraction.entities.orion;
// Generated Oct 7, 2016 10:51:46 AM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Client generated by hbm2java
 */
@Entity
@Table(name="client"
    ,catalog="orion"
)
public class Client  implements java.io.Serializable {


     private Integer id;
     private String email;
     private String authToken;
     private Date registeredOn;
     private String userName;
     private String password;
     private String refreshToken;
     private boolean ennabled;
     private Set<ClientLicense> clientLicenses = new HashSet<ClientLicense>(0);
     private Set<ProcessingRequest> processingRequests = new HashSet<ProcessingRequest>(0);
     private Set<Resource> resources = new HashSet<Resource>(0);

    public Client() {
    }

	
    public Client(String email, String authToken, Date registeredOn, String userName, String password, String refreshToken, boolean ennabled) {
        this.email = email;
        this.authToken = authToken;
        this.registeredOn = registeredOn;
        this.userName = userName;
        this.password = password;
        this.refreshToken = refreshToken;
        this.ennabled = ennabled;
    }
    public Client(String email, String authToken, Date registeredOn, String userName, String password, String refreshToken, boolean ennabled, Set<ClientLicense> clientLicenses, Set<ProcessingRequest> processingRequests, Set<Resource> resources) {
       this.email = email;
       this.authToken = authToken;
       this.registeredOn = registeredOn;
       this.userName = userName;
       this.password = password;
       this.refreshToken = refreshToken;
       this.ennabled = ennabled;
       this.clientLicenses = clientLicenses;
       this.processingRequests = processingRequests;
       this.resources = resources;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="ID", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

    
    @Column(name="EMAIL", nullable=false, length=256)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    
    @Column(name="AUTH_TOKEN", nullable=false, length=50)
    public String getAuthToken() {
        return this.authToken;
    }
    
    public void setAuthToken(String authToken) {
        this.authToken = authToken;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="REGISTERED_ON", nullable=false, length=10)
    public Date getRegisteredOn() {
        return this.registeredOn;
    }
    
    public void setRegisteredOn(Date registeredOn) {
        this.registeredOn = registeredOn;
    }

    
    @Column(name="USER_NAME", nullable=false, length=45)
    public String getUserName() {
        return this.userName;
    }
    
    public void setUserName(String userName) {
        this.userName = userName;
    }

    
    @Column(name="PASSWORD", nullable=false, length=20)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    
    @Column(name="REFRESH_TOKEN", nullable=false, length=40)
    public String getRefreshToken() {
        return this.refreshToken;
    }
    
    public void setRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    
    @Column(name="ENNABLED", nullable=false)
    public boolean isEnnabled() {
        return this.ennabled;
    }
    
    public void setEnnabled(boolean ennabled) {
        this.ennabled = ennabled;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="client")
    public Set<ClientLicense> getClientLicenses() {
        return this.clientLicenses;
    }
    
    public void setClientLicenses(Set<ClientLicense> clientLicenses) {
        this.clientLicenses = clientLicenses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="client")
    public Set<ProcessingRequest> getProcessingRequests() {
        return this.processingRequests;
    }
    
    public void setProcessingRequests(Set<ProcessingRequest> processingRequests) {
        this.processingRequests = processingRequests;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="client")
    public Set<Resource> getResources() {
        return this.resources;
    }
    
    public void setResources(Set<Resource> resources) {
        this.resources = resources;
    }




}


