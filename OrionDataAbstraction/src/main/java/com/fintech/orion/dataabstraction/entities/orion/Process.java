package com.fintech.orion.dataabstraction.entities.orion;
// Generated Oct 7, 2016 10:51:46 AM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Process generated by hbm2java
 */
@Entity
@Table(name="process"
    ,catalog="orion"
)
public class Process  implements java.io.Serializable {


     private Integer id;
     private ProcessType processType;
     private ProcessingRequest processingRequest;
     private Date requestSentOn;
     private Date responseReceivedOn;
     private String processIdentificationCode;
     private Set<ProcessResource> processResources = new HashSet<ProcessResource>(0);
     private Set<Response> responses = new HashSet<Response>(0);

    public Process() {
    }

	
    public Process(ProcessType processType, ProcessingRequest processingRequest, String processIdentificationCode) {
        this.processType = processType;
        this.processingRequest = processingRequest;
        this.processIdentificationCode = processIdentificationCode;
    }
    public Process(ProcessType processType, ProcessingRequest processingRequest, Date requestSentOn, Date responseReceivedOn, String processIdentificationCode, Set<ProcessResource> processResources, Set<Response> responses) {
       this.processType = processType;
       this.processingRequest = processingRequest;
       this.requestSentOn = requestSentOn;
       this.responseReceivedOn = responseReceivedOn;
       this.processIdentificationCode = processIdentificationCode;
       this.processResources = processResources;
       this.responses = responses;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="ID", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PROCESS_TYPE", nullable=false)
    public ProcessType getProcessType() {
        return this.processType;
    }
    
    public void setProcessType(ProcessType processType) {
        this.processType = processType;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PROCESSING_REQUEST", nullable=false)
    public ProcessingRequest getProcessingRequest() {
        return this.processingRequest;
    }
    
    public void setProcessingRequest(ProcessingRequest processingRequest) {
        this.processingRequest = processingRequest;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="REQUEST_SENT_ON", length=19)
    public Date getRequestSentOn() {
        return this.requestSentOn;
    }
    
    public void setRequestSentOn(Date requestSentOn) {
        this.requestSentOn = requestSentOn;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="RESPONSE_RECEIVED_ON", length=19)
    public Date getResponseReceivedOn() {
        return this.responseReceivedOn;
    }
    
    public void setResponseReceivedOn(Date responseReceivedOn) {
        this.responseReceivedOn = responseReceivedOn;
    }

    
    @Column(name="PROCESS_IDENTIFICATION_CODE", nullable=false, length=40)
    public String getProcessIdentificationCode() {
        return this.processIdentificationCode;
    }
    
    public void setProcessIdentificationCode(String processIdentificationCode) {
        this.processIdentificationCode = processIdentificationCode;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="process")
    public Set<ProcessResource> getProcessResources() {
        return this.processResources;
    }
    
    public void setProcessResources(Set<ProcessResource> processResources) {
        this.processResources = processResources;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="process")
    public Set<Response> getResponses() {
        return this.responses;
    }
    
    public void setResponses(Set<Response> responses) {
        this.responses = responses;
    }




}


